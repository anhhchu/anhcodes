<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>how-to, git on AnhCodes</title>
    <link>https://anhcodes.dev/tags/how-to-git/</link>
    <description>Recent content in how-to, git on AnhCodes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Dec 2022 11:30:20 +0000</lastBuildDate><atom:link href="https://anhcodes.dev/tags/how-to-git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to recover lost files after a git reset --hard</title>
      <link>https://anhcodes.dev/blog/recover-lost-files-git-reset-hard/</link>
      <pubDate>Tue, 27 Dec 2022 11:30:20 +0000</pubDate>
      
      <guid>https://anhcodes.dev/blog/recover-lost-files-git-reset-hard/</guid>
      <description>While working on a recent project, I accidentally committed some files. Instead of using git reset --soft &amp;lt;prev-commit-id&amp;gt; to unstage them, I used git reset --hard HEAD and all of my new changes gone with the wind. After panicking for a few minutes, I determined to learn how git reset works and how I can revert the damages.
git reset &amp;ndash;hard vs. git reset &amp;ndash;soft git reset --hard resets the current branch tip, and also deletes any changes in the working directory and staging area (although files under git stash will not be affected).</description>
    </item>
    
  </channel>
</rss>
